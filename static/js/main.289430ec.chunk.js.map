{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","_ref","images","_useState","useState","_useState2","_slicedToArray","toolTipValue","setToolTipValue","_useState3","_useState4","itemWidth","setItemWidth","_useState5","_useState6","itemNumber","setItemNumber","_useState7","_useState8","step","setSteps","_useState9","_useState10","animationDuration","setAnimationDuration","_useState11","_useState12","infiniteRotation","setInfiniteRotation","_useState13","_useState14","position","setPosition","_useState15","_useState16","containerWidth","setContainerWidth","useEffect","toolTip","document","querySelector","slider","toolPosition","Number","value","min","max","clientWidth","style","left","concat","top","clientHeight","handleRadioChange","event","JSON","parse","target","maxPosition","length","imagesContainerStyles","width","height","transform","transition","imageStyles","isLastImageDisplayed","Math","abs","isFirstImageDisplayed","_jsxs","className","children","_jsx","type","onClick","prevPosition","newPosition","disabled","map","image","src","alt","htmlFor","id","onChange","radius","newValue","parseInt","name","checked","App","ReactDOM","render","getElementById"],"mappings":"mMA0TeA,EAjTmB,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACnCC,EAAwCC,mBAAiB,GAAEC,EAAAC,YAAAH,EAAA,GAApDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,EAAkCL,mBAAiB,KAAIM,EAAAJ,YAAAG,EAAA,GAAhDE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAAoCT,mBAAiB,GAAEU,EAAAR,YAAAO,EAAA,GAAhDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAyBb,mBAAiB,GAAEc,EAAAZ,YAAAW,EAAA,GAArCE,EAAID,EAAA,GAAEE,EAAQF,EAAA,GACrBG,EAAkDjB,mBAAiB,KAAIkB,EAAAhB,YAAAe,EAAA,GAAhEE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,EAAgDrB,oBAAkB,GAAMsB,EAAApB,YAAAmB,EAAA,GAAjEE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,EAAgCzB,mBAAiB,GAAE0B,EAAAxB,YAAAuB,EAAA,GAA5CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,EAA4C7B,mBAAiBW,EAAaJ,GAAUuB,EAAA5B,YAAA2B,EAAA,GAA7EE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAExCG,qBAAU,WACR,IAAMC,EAAUC,SAASC,cAAc,YAEvC,GAAIF,EAAS,CACX,IAAMG,EAASF,SAASC,cAAc,cAEhCE,GADQC,OAAOF,EAAOG,OACGD,OAAOF,EAAOI,OAASF,OAAOF,EAAOK,KAAOH,OAAOF,EAAOI,OAAUF,OAAOF,EAAOM,aAAeJ,OAAOL,EAAQS,cAE9IT,EAAwBU,MAAMC,KAAI,GAAAC,OAAMR,EAAY,MAEpDJ,EAAwBU,MAAMG,IAAG,IAAAD,OAAOZ,EAAQc,aAAY,SAE9D,CAAC7C,IAEJ8B,qBAAU,WACRD,EAAkBrB,EAAaJ,GAC/BqB,EAAY,KACX,CAACjB,EAAYJ,IAEhB0B,qBAAU,WACJV,GACFK,EAAY,KAEb,CAACL,IAEJ,IAQM0B,EAAoB,SAACC,GACzB1B,EAAoB2B,KAAKC,MAAMF,EAAMG,OAAOb,SAgB1Cc,EAAcxD,EAAOyD,OAAShD,EAAYI,EAAaJ,EAyBrDiD,EAAwB,CAC5BC,MAAM,GAADX,OAAKf,EAAc,MACxB2B,OAAO,GAADZ,OAAKvC,EAAS,MACpBoD,UAAU,cAADb,OAAgBnB,EAAQ,OACjCiC,WAAW,OAADd,OAAS3B,EAAiB,OAGhC0C,EAAc,CAClBJ,MAAM,GAADX,OAAKvC,EAAS,OAIfuD,EAAuBC,KAAKC,IAAIrC,KAAcY,OAAOe,GAErDW,EAAqC,IAAbtC,EAE9B,OACEuC,eAAA,OAAKC,UAAU,WAAUC,SAAA,CACvBF,eAAA,OAAKC,UAAU,sBAAqBC,SAAA,CAClCC,cAAA,UACEC,KAAK,SACLH,UAAU,qBACVI,QA5DqB,WAC3B3C,GAAY,SAAC4C,GACX,IAAMC,EAAcD,EAAezD,EAAOR,EAE1C,OAAIgB,GAAoBkD,EAAc,GAE5BnB,EAGHS,KAAKtB,IAAI,EAAGgC,OAoDfC,UAAUnD,GAA2B0C,EAAsBG,SAE1D,MAEHC,cAAA,OACEF,UAAU,iBAAgBC,SAE1BC,cAAA,MACEF,UAAU,kBACVvB,MAAOY,EAAsBY,SAE5BtE,EAAO6E,KAAI,SAAAC,GAAK,OACfP,cAAA,MAAAD,SACEC,cAAA,OACEQ,IAAKD,EACLE,IAAI,IACJlC,MAAOiB,KAJFe,UAUfP,cAAA,UACEC,KAAK,SACLH,UAAU,qBACV,UAAQ,OACRI,QAxEsB,WAC5B3C,GAAY,SAAC4C,GACX,IAAMC,EAAcD,EAAezD,EAAOR,EAE1C,OAAIgB,EACEkD,GAAenB,EACjBA,EAAc,EAKZmB,EAAc,GACRnB,EAGHmB,EAGFV,KAAKrB,KAAKY,EAAamB,OAuD1BC,UAAUnD,GAA2BuC,EAAqBM,SAEzD,SAGLF,eAAA,OAAKC,UAAU,2BAA0BC,SAAA,CACvCF,eAAA,SACEa,QAAQ,YACRZ,UAAU,iBAAgBC,SAAA,CAG1BC,cAAA,OAAKF,UAAU,sBAAqBC,SAAC,qBAIrCC,cAAA,OAAKF,UAAU,oBAAmBC,SAC/B,MAGHF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACnCC,cAAA,SACEC,KAAK,QACLU,GAAG,YACHvC,IAAI,MACJC,IAAI,MACJF,MAAOjC,EACP0E,SAAU,SAAC/B,GACT,IAAMgC,EAAShC,EAAMG,OAAOb,MACtB2C,EAAWC,SAASF,EAAQ,IAElC1E,EAAa+B,OAAOW,EAAMG,OAAOb,QAEjCpC,EAAgB+E,MAGpBd,cAAA,OAAKF,UAAU,UAASC,SACrB7D,OAIL8D,cAAA,OAAKF,UAAU,oBAAmBC,SAC/B,SAILF,eAAA,SACEa,QAAQ,aACRZ,UAAU,iBAAgBC,SAAA,CAE1BC,cAAA,OAAKF,UAAU,sBAAqBC,SAAC,oBAIrCC,cAAA,OAAKF,UAAU,oBAAmBC,SAC/B,IAEHF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAEnCC,cAAA,SACEC,KAAK,QACLU,GAAG,aACHvC,IAAI,IACJC,IAAI,IACJF,MAAO7B,EACPsE,SAAU,SAAC/B,GACT,IAAMgC,EAAShC,EAAMG,OAAOb,MACtB2C,EAAWC,SAASF,EAAQ,IAElCtE,EAAc2B,OAAOW,EAAMG,OAAOb,QAElCpC,EAAgB+E,MAGpBd,cAAA,OAAKF,UAAU,UAASC,SACrBzD,OAGL0D,cAAA,OAAKF,UAAU,oBAAmBC,SAC/B,OAILF,eAAA,SACEa,QAAQ,SACRZ,UAAU,iBAAgBC,SAAA,CAE1BC,cAAA,OAAKF,UAAU,sBAAqBC,SAAC,UAIrCC,cAAA,OAAKF,UAAU,oBAAmBC,SAC/B,IAGHC,cAAA,SACEC,KAAK,QACLU,GAAG,SACHvC,IAAI,IACJC,IAAK/B,EACL6B,MAAOzB,EACPkE,SApMe,SAAC/B,GACxBlC,EAASuB,OAAOW,EAAMG,OAAOb,WAsMvB6B,cAAA,OAAKF,UAAU,oBAAmBC,SAC/BzD,OAILuD,eAAA,SACEa,QAAQ,oBACRZ,UAAU,iBAAgBC,SAAA,CAE1BC,cAAA,OAAKF,UAAU,sBAAqBC,SAAC,6BAIrCC,cAAA,OAAKF,UAAU,oBAAmBC,SAAC,SAInCC,cAAA,SACEC,KAAK,QACLU,GAAG,oBACHvC,IAAI,MACJC,IAAI,OACJF,MAAOrB,EACP8D,SAlOe,SAAC/B,GACxB9B,EAAqBmB,OAAOW,EAAMG,OAAOb,WAoOnC6B,cAAA,OAAKF,UAAU,oBAAmBC,SAAC,UAKrCF,eAAA,OAAKC,UAAU,0BAAyBC,SAAA,CAEtCC,cAAA,OAAKF,UAAU,sBAAqBC,SAAC,uBAIrCF,eAAA,SAAOa,QAAQ,uBAAsBX,SAAA,CACnCC,cAAA,SACEC,KAAK,QACLe,KAAK,mBACLL,GAAG,uBACHxC,MAAM,OACN8C,SAA8B,IAArB/D,EACT0D,SAAUhC,IACV,SAIJiB,eAAA,SAAOa,QAAQ,wBAAuBX,SAAA,CACpCC,cAAA,SACEC,KAAK,QACLe,KAAK,mBACLL,GAAG,wBACHxC,MAAM,QACN8C,SAA8B,IAArB/D,EACT0D,SAAUhC,IACV,kBCpRCsC,EAxBK,WAClB,IAAAxF,EAAiBC,mBAAS,CACxB,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iBAVKF,EAWLI,YAAAH,EAAA,GAXW,GAab,OACEmE,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAElBF,eAAA,MAAIC,UAAU,aAAa,UAAQ,QAAOC,SAAA,CAAC,iBAAetE,EAAOyD,OAAO,aAExEc,cAACzE,EAAQ,CAACE,OAAQA,QCpBxB0F,IAASC,OAAOpB,cAACkB,EAAG,IAAKpD,SAASuD,eAAe,U","file":"static/js/main.289430ec.chunk.js","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport '../styles/Carousel.scss';\n\ntype Props = {\n  images: string[];\n};\n\nconst Carousel: React.FC<Props> = ({ images }) => {\n  const [toolTipValue, setToolTipValue] = useState<number>(1);\n  const [itemWidth, setItemWidth] = useState<number>(130);\n  const [itemNumber, setItemNumber] = useState<number>(3);\n  const [step, setSteps] = useState<number>(3);\n  const [animationDuration, setAnimationDuration] = useState<number>(300);\n  const [infiniteRotation, setInfiniteRotation] = useState<boolean>(false);\n  const [position, setPosition] = useState<number>(0);\n  const [containerWidth, setContainerWidth] = useState<number>(itemNumber * itemWidth);\n\n  useEffect(() => {\n    const toolTip = document.querySelector('.toolTip');\n\n    if (toolTip) {\n      const slider = document.querySelector('#itemWidth') as HTMLInputElement;\n      const value = Number(slider.value);\n      const toolPosition = ((value - Number(slider.min)) / (Number(slider.max) - Number(slider.min))) * (Number(slider.clientWidth) - Number(toolTip.clientWidth));\n\n      (toolTip as HTMLElement).style.left = `${toolPosition}px`;\n\n      (toolTip as HTMLElement).style.top = `-${toolTip.clientHeight}px`;\n    }\n  }, [toolTipValue]);\n\n  useEffect(() => {\n    setContainerWidth(itemNumber * itemWidth);\n    setPosition(0);\n  }, [itemNumber, itemWidth]);\n\n  useEffect(() => {\n    if (infiniteRotation) {\n      setPosition(0);\n    }\n  }, [infiniteRotation]);\n\n  const handleAnimChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAnimationDuration(Number(event.target.value));\n  };\n\n  const handleStepChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSteps(Number(event.target.value));\n  };\n\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInfiniteRotation(JSON.parse(event.target.value));\n  };\n\n  const handleTransitionLeft = () => {\n    setPosition((prevPosition) => {\n      const newPosition = prevPosition + step * itemWidth;\n\n      if (infiniteRotation && newPosition > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return -maxPosition;\n      }\n\n      return Math.min(0, newPosition);\n    });\n  };\n\n  let maxPosition = images.length * itemWidth - itemNumber * itemWidth;\n\n  const handleTransitionRight = () => {\n    setPosition((prevPosition) => {\n      const newPosition = prevPosition - step * itemWidth;\n\n      if (infiniteRotation) {\n        if (newPosition < -maxPosition) {\n          maxPosition = 0;\n\n          return maxPosition;\n        }\n\n        if (newPosition > 0) {\n          return -maxPosition;\n        }\n\n        return newPosition;\n      }\n\n      return Math.max(-maxPosition, newPosition);\n    });\n  };\n\n  // STYLES region\n  const imagesContainerStyles = {\n    width: `${containerWidth}px`,\n    height: `${itemWidth}px`,\n    transform: `translateX(${position}px)`,\n    transition: `all ${animationDuration}ms`,\n  };\n\n  const imageStyles = {\n    width: `${itemWidth}px`,\n  };\n  // end STYLES region\n\n  const isLastImageDisplayed = Math.abs(position) === Number(maxPosition);\n\n  const isFirstImageDisplayed = position === 0;\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__container\">\n        <button\n          type=\"button\"\n          className=\"button button-prev\"\n          onClick={handleTransitionLeft}\n          disabled={infiniteRotation ? false : isFirstImageDisplayed}\n        >\n          {'<'}\n        </button>\n        <div\n          className=\"Carousel__list\"\n        >\n          <ul\n            className=\"Carousel__items\"\n            style={imagesContainerStyles}\n          >\n            {images.map(image => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt=\"1\"\n                  style={imageStyles}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <button\n          type=\"button\"\n          className=\"button button-next\"\n          data-cy=\"next\"\n          onClick={handleTransitionRight}\n          disabled={infiniteRotation ? false : isLastImageDisplayed}\n        >\n          {'>'}\n        </button>\n      </div>\n      <div className=\"inputs inputs__container\">\n        <label\n          htmlFor=\"itemWidth\"\n          className=\"inputs__labels\"\n        >\n\n          <div className=\"input__labels-title\">\n            Item width (px):\n          </div>\n\n          <div className=\"input__labels-min\">\n            {100}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <input\n              type=\"range\"\n              id=\"itemWidth\"\n              min=\"100\"\n              max=\"160\"\n              value={itemWidth}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                const radius = event.target.value;\n                const newValue = parseInt(radius, 10);\n\n                setItemWidth(Number(event.target.value));\n\n                setToolTipValue(newValue);\n              }}\n            />\n            <div className=\"toolTip\">\n              {itemWidth}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            {160}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"itemNumber\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"input__labels-title\">\n            Items in frame:\n          </div>\n\n          <div className=\"input__labels-min\">\n            {1}\n          </div>\n          <div className=\"input__labels-slider\">\n\n            <input\n              type=\"range\"\n              id=\"itemNumber\"\n              min=\"1\"\n              max=\"5\"\n              value={itemNumber}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                const radius = event.target.value;\n                const newValue = parseInt(radius, 10);\n\n                setItemNumber(Number(event.target.value));\n\n                setToolTipValue(newValue);\n              }}\n            />\n            <div className=\"toolTip\">\n              {itemNumber}\n            </div>\n          </div>\n          <div className=\"input__labels-max\">\n            {5}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"stepId\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"input__labels-title\">\n            Step:\n          </div>\n\n          <div className=\"input__labels-min\">\n            {1}\n          </div>\n\n          <input\n            type=\"range\"\n            id=\"stepId\"\n            min=\"1\"\n            max={itemNumber}\n            value={step}\n            onChange={handleStepChange}\n          />\n\n          <div className=\"input__labels-max\">\n            {itemNumber}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"animationDuration\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"input__labels-title\">\n            Animation Duration (ms):\n          </div>\n\n          <div className=\"input__labels-min\">\n            0.1s\n          </div>\n\n          <input\n            type=\"range\"\n            id=\"animationDuration\"\n            min=\"100\"\n            max=\"1000\"\n            value={animationDuration}\n            onChange={handleAnimChange}\n          />\n\n          <div className=\"input__labels-max\">\n            1s\n          </div>\n        </label>\n\n        <div className=\"inputs__container-radio\">\n\n          <div className=\"input__labels-title\">\n            Infinite rotation:\n          </div>\n\n          <label htmlFor=\"infiniteRotationTrue\">\n            <input\n              type=\"radio\"\n              name=\"infiniteRotation\"\n              id=\"infiniteRotationTrue\"\n              value=\"true\"\n              checked={infiniteRotation === true}\n              onChange={handleRadioChange}\n            />\n            Yes\n          </label>\n\n          <label htmlFor=\"infiniteRotationFalse\">\n            <input\n              type=\"radio\"\n              name=\"infiniteRotation\"\n              id=\"infiniteRotationFalse\"\n              value=\"false\"\n              checked={infiniteRotation === false}\n              onChange={handleRadioChange}\n            />\n            No\n          </label>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { FC, useState } from 'react';\nimport './styles/App.scss';\nimport Carousel from './components/Carousel';\n\nconst App: FC<{}> = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 className=\"App__title\" data-cy=\"title\">Carousel with {images.length} images</h1>\n\n      <Carousel images={images} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}