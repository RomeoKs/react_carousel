{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","_ref","images","_useState","useState","_useState2","_slicedToArray","itemWidth","setItemWidth","_useState3","_useState4","itemNumber","setItemNumber","_useState5","_useState6","step","setSteps","_useState7","_useState8","animationDuration","setAnimationDuration","_useState9","_useState10","infiniteRotation","setInfiniteRotation","_useState11","_useState12","position","setPosition","_useState13","_useState14","containerWidth","setContainerWidth","useEffect","handleRadioChange","event","JSON","parse","target","value","maxPosition","length","imagesContainerStyles","width","concat","height","transform","transition","imageStyles","isLastImageDisplayed","Math","abs","Number","isFirstImageDisplayed","_jsxs","className","children","_jsx","type","onClick","prevPosition","disabled","style","map","image","src","alt","htmlFor","id","min","max","onChange","name","checked","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecf12dde.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport '../styles/Carousel.scss';\n\ntype Props = {\n  images: string[];\n};\n\nconst Carousel: React.FC<Props> = ({ images }) => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [itemNumber, setItemNumber] = useState(3);\n  const [step, setSteps] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(300);\n  const [infiniteRotation, setInfiniteRotation] = useState(false);\n  const [position, setPosition] = useState(0);\n  const [containerWidth, setContainerWidth] = useState(itemNumber * itemWidth);\n\n  useEffect(() => {\n    setContainerWidth(itemNumber * itemWidth);\n    setPosition(0);\n  }, [itemNumber, itemWidth]);\n\n  const handleAnimChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAnimationDuration(Number(event.target.value));\n  };\n\n  const handleStepChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSteps(Number(event.target.value));\n  };\n\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInfiniteRotation(JSON.parse(event.target.value));\n  };\n\n  const handleTransitionLeft = () => {\n    setPosition(prevPosition => prevPosition + (step * itemWidth));\n  };\n\n  const maxPosition = images.length * itemWidth - itemNumber * itemWidth;\n\n  const handleTransitionRight = () => {\n    setPosition(prevPosition => prevPosition - (step * itemWidth));\n  };\n\n  // STYLES region\n  const imagesContainerStyles = {\n    width: `${containerWidth}px`,\n    height: `${itemWidth}px`,\n    transform: `translateX(${position}px)`,\n    transition: `all ${animationDuration}ms`,\n  };\n\n  const imageStyles = {\n    width: `${itemWidth}px`,\n  };\n  // end STYLES region\n\n  const isLastImageDisplayed = Math.abs(position) >= Number(maxPosition)\n    + itemWidth;\n\n  const isFirstImageDisplayed = position === 0;\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__container\">\n        <button\n          type=\"button\"\n          className=\"button button-prev\"\n          onClick={handleTransitionLeft}\n          disabled={isFirstImageDisplayed}\n        >\n          {'<'}\n        </button>\n        <div\n          className=\"Carousel__list\"\n        >\n          <ul\n            className=\"Carousel__items\"\n            style={imagesContainerStyles}\n          >\n            {images.map(image => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt=\"1\"\n                  style={imageStyles}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <button\n          type=\"button\"\n          className=\"button button-next\"\n          data-cy=\"next\"\n          onClick={handleTransitionRight}\n          disabled={isLastImageDisplayed}\n        // }\n        >\n          {'>'}\n        </button>\n      </div>\n      <div className=\"inputs inputs__container\">\n        <label\n          htmlFor=\"itemWidth\"\n          className=\"inputs__labels\"\n        >\n          Item width (px):\n          <input\n            type=\"range\"\n            id=\"itemWidth\"\n            step=\"10\"\n            min=\"100\"\n            max=\"160\"\n            value={itemWidth}\n            onChange={(event) => setItemWidth(Number(event.target.value))}\n          />\n        </label>\n\n        <label\n          htmlFor=\"frameSize\"\n          className=\"inputs__labels\"\n        >\n          Items in frame:\n          <input\n            type=\"range\"\n            id=\"frameSize\"\n            min=\"1\"\n            max=\"5\"\n            value={itemNumber}\n            onChange={(event) => setItemNumber(Number(event.target.value))}\n          />\n        </label>\n\n        <label\n          htmlFor=\"stepId\"\n          className=\"inputs__labels\"\n        >\n          Step:\n          <input\n            type=\"range\"\n            id=\"stepId\"\n            min=\"1\"\n            max=\"5\"\n            value={step}\n            onChange={handleStepChange}\n          />\n        </label>\n\n        <label\n          htmlFor=\"animationDuration\"\n          className=\"inputs__labels\"\n        >\n          Animation Duration (ms):\n          <input\n            type=\"range\"\n            id=\"animationDuration\"\n            min=\"100\"\n            max=\"1000\"\n            value={animationDuration}\n            onChange={handleAnimChange}\n          />\n        </label>\n        <div className=\"inputs__container-radio\">\n          Infinite rotation:\n          <label htmlFor=\"infiniteRotationTrue\">\n            <input\n              type=\"radio\"\n              name=\"infiniteRotation\"\n              id=\"infiniteRotationTrue\"\n              value=\"true\"\n              checked={infiniteRotation === true}\n              onChange={handleRadioChange}\n            />\n            Yes\n          </label>\n          <label htmlFor=\"infiniteRotationFalse\">\n            <input\n              type=\"radio\"\n              name=\"infiniteRotation\"\n              id=\"infiniteRotationFalse\"\n              value=\"false\"\n              checked={infiniteRotation === false}\n              onChange={handleRadioChange}\n            />\n            No\n          </label>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { FC, useState } from 'react';\nimport './styles/App.scss';\nimport Carousel from './components/Carousel';\n\nconst App: FC<{}> = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 className=\"App__title\" data-cy=\"title\">Carousel with {images.length} images</h1>\n\n      <Carousel images={images} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}