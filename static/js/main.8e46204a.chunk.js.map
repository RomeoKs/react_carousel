{"version":3,"sources":["components/InputRange/InputRange.tsx","components/InputRadio/InputRadio.tsx","components/Carousel.tsx","App.tsx","index.tsx"],"names":["InputRange","_ref","type","id","name","min","max","step","value","handleChange","_jsx","_Fragment","children","onChange","className","InputRadio","checked","handleRadioChange","labelText","_jsxs","htmlFor","Carousel","images","_useState","useState","_useState2","_slicedToArray","toolTipValue","setToolTipValue","_useState3","_useState4","itemWidth","setItemWidth","_useState5","_useState6","itemNumber","setItemNumber","_useState7","_useState8","setSteps","_useState9","_useState10","animationDuration","setAnimationDuration","_useState11","_useState12","infiniteRotation","setInfiniteRotation","_useState13","_useState14","position","setPosition","_useState15","_useState16","frameWidth","setFrameWidth","useEffect","toolTips","document","querySelectorAll","forEach","slider","index","toolPosition","Number","getAttribute","clientWidth","style","left","concat","handleInputChange","event","setter","radius","target","newValue","parseInt","maxPosition","length","imagesContainerStyles","width","height","transform","transition","imageStyles","isLastImageDisplayed","Math","abs","isFirstImageDisplayed","onClick","prevPosition","newPosition","disabled","map","image","src","alt","toFixed","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e46204a.chunk.js","sourcesContent":["type InputProps = {\n  type: 'range';\n  id?: string;\n  name?: string;\n  min?: string | number;\n  max?: string | number;\n  step?: string | number;\n  value?: string | number;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const InputRange: React.FC<InputProps> = ({\n  type,\n  id,\n  name,\n  min,\n  max,\n  step,\n  value,\n  handleChange,\n}) => {\n  return (\n    <>\n      <input\n        type={type}\n        id={id}\n        name={name}\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={handleChange}\n        className=\"slider\"\n      />\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  id: string;\n  name: string;\n  value: string;\n  checked: boolean;\n  handleRadioChange: React.ChangeEventHandler<HTMLInputElement>;\n  labelText: string;\n};\n\nconst InputRadio: React.FC<Props> = ({\n  id,\n  name,\n  value,\n  checked,\n  handleRadioChange,\n  labelText,\n}) => (\n  <label htmlFor={id}>\n    <div className=\"inputs__labels-option\">{labelText}</div>\n    <div className=\"input__labels-slider\">\n      <input\n        type=\"radio\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        onChange={handleRadioChange}\n      />\n      <span className=\"checkmark\" />\n    </div>\n  </label>\n);\n\nexport default InputRadio;\n","import React, { useEffect, useState } from 'react';\nimport '../styles/Carousel.scss';\nimport { InputRange } from './InputRange/InputRange';\nimport InputRadio from './InputRadio/InputRadio';\n\ntype Props = {\n  images: string[];\n};\n\nconst Carousel: React.FC<Props> = ({ images }) => {\n  const [toolTipValue, setToolTipValue] = useState<number>(1);\n  const [itemWidth, setItemWidth] = useState<number>(130);\n  const [itemNumber, setItemNumber] = useState<number>(3);\n  const [step, setSteps] = useState<number>(3);\n  const [animationDuration, setAnimationDuration] = useState<number>(300);\n  const [infiniteRotation, setInfiniteRotation] = useState<boolean>(false);\n  const [position, setPosition] = useState<number>(0);\n  const [frameWidth, setFrameWidth] = useState<number>(itemNumber * itemWidth);\n\n  useEffect(() => {\n    const toolTips = document.querySelectorAll('.toolTip');\n\n    if (toolTips) {\n      const sliders = document.querySelectorAll('.slider');\n\n      sliders.forEach((slider, index) => {\n        const value = Number(slider.getAttribute('value'));\n        const toolPosition = ((value - Number(slider.getAttribute('min')))\n          / (Number(slider.getAttribute('max'))\n            - Number(slider.getAttribute('min'))))\n          * (Number(slider.clientWidth) - Number(toolTips[index].clientWidth));\n\n        (toolTips[index] as HTMLElement).style.left = `${toolPosition}px`;\n      });\n    }\n  }, [toolTipValue]);\n\n  useEffect(() => {\n    if (itemNumber < step) {\n      setSteps(itemNumber);\n    }\n  }, [itemNumber, step]);\n\n  useEffect(() => {\n    setFrameWidth(itemNumber * itemWidth);\n    setPosition(0);\n  }, [itemNumber, itemWidth]);\n\n  useEffect(() => {\n    if (infiniteRotation) {\n      setPosition(0);\n    }\n  }, [infiniteRotation]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>,\n    setter: React.Dispatch<React.SetStateAction<number>>) => {\n    const radius = event.target.value;\n    const newValue = parseInt(radius, 10);\n\n    setter(newValue);\n    setToolTipValue(newValue);\n  };\n\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === 'true';\n\n    setInfiniteRotation(newValue);\n  };\n\n  let maxPosition = images.length * itemWidth - itemNumber * itemWidth;\n\n  const handleTransitionLeft = () => {\n    setPosition((prevPosition) => {\n      const newPosition = prevPosition + step * itemWidth;\n\n      if (infiniteRotation && newPosition > 0) {\n        return -maxPosition;\n      }\n\n      return Math.min(0, newPosition);\n    });\n  };\n\n  const handleTransitionRight = () => {\n    setPosition((prevPosition) => {\n      const newPosition = prevPosition - step * itemWidth;\n\n      if (infiniteRotation) {\n        if (newPosition < -maxPosition) {\n          maxPosition = 0;\n\n          return maxPosition;\n        }\n\n        if (newPosition > 0) {\n          return -maxPosition;\n        }\n\n        return newPosition;\n      }\n\n      return Math.max(-maxPosition, newPosition);\n    });\n  };\n\n  // STYLES region\n  const imagesContainerStyles = {\n    width: `${frameWidth}px`,\n    height: `${itemWidth}px`,\n    transform: `translateX(${position}px)`,\n    transition: `all ${animationDuration}ms`,\n  };\n\n  const imageStyles = {\n    width: `${itemWidth}px`,\n  };\n  // end STYLES region\n\n  const isLastImageDisplayed = Math.abs(position) === Number(maxPosition);\n\n  const isFirstImageDisplayed = position === 0;\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__container\">\n        <button\n          type=\"button\"\n          className=\"button button-prev\"\n          onClick={handleTransitionLeft}\n          disabled={infiniteRotation ? false : isFirstImageDisplayed}\n        >\n          {'<'}\n        </button>\n        <div\n          className=\"Carousel__list\"\n        >\n          <ul\n            className=\"Carousel__items\"\n            style={imagesContainerStyles}\n          >\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={`Emojy ${index + 1}`}\n                  style={imageStyles}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"button button-next\"\n          data-cy=\"next\"\n          onClick={handleTransitionRight}\n          disabled={infiniteRotation ? false : isLastImageDisplayed}\n        >\n          {'>'}\n        </button>\n      </div>\n      <div className=\"inputs inputs__container\">\n        <label\n          htmlFor=\"itemWidth\"\n          className=\"inputs__labels\"\n        >\n\n          <div className=\"inputs__labels-title\">\n            Item width (px):\n          </div>\n\n          <div className=\"input__labels-min\">\n            {100}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <InputRange\n              type=\"range\"\n              id=\"itemWidth\"\n              min=\"100\"\n              max=\"160\"\n              value={itemWidth}\n              handleChange={(event) => handleInputChange(event, setItemWidth)}\n            />\n            <div className=\"toolTip\">\n              {itemWidth}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            {160}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"itemNumber\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"inputs__labels-title\">\n            Items in frame:\n          </div>\n\n          <div className=\"input__labels-min\">\n            {1}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <InputRange\n              type=\"range\"\n              id=\"itemNumber\"\n              min=\"1\"\n              max=\"5\"\n              value={itemNumber}\n              handleChange={(event) => handleInputChange(event, setItemNumber)}\n            />\n            <div className=\"toolTip\">\n              {itemNumber}\n            </div>\n          </div>\n          <div className=\"input__labels-max\">\n            {5}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"stepId\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"inputs__labels-title\">\n            Step:\n            <div className=\"inputs__labels-warning\">\n              (step cannot be bigger than items in frame)\n            </div>\n          </div>\n\n          <div className=\"input__labels-min\">\n            {1}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <InputRange\n              type=\"range\"\n              id=\"stepId\"\n              min=\"1\"\n              max={itemNumber}\n              value={step}\n              handleChange={(event) => handleInputChange(event, setSteps)}\n            />\n            <div className=\"toolTip\">\n              {step}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            {itemNumber}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"animationDuration\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"inputs__labels-title\">\n            Animation Duration (ms):\n          </div>\n\n          <div className=\"input__labels-min\">\n            0.1s\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <InputRange\n              type=\"range\"\n              id=\"animationDuration\"\n              min=\"100\"\n              max=\"1000\"\n              value={animationDuration}\n              handleChange={(event) => {\n                handleInputChange(event, setAnimationDuration);\n              }}\n            />\n\n            <div className=\"toolTip\">\n              {`${(animationDuration / 1000).toFixed(1)}s`}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            1s\n          </div>\n        </label>\n\n        <div className=\"inputs__container-radio\">\n\n          <div className=\"inputs__labels-title\">\n            Infinite rotation:\n          </div>\n\n          <InputRadio\n            id=\"infiniteRotation\"\n            name=\"infiniteRotation\"\n            value=\"true\"\n            checked={infiniteRotation}\n            handleRadioChange={handleRadioChange}\n            labelText=\"Yes\"\n          />\n\n          <InputRadio\n            id=\"finiteRotation\"\n            name=\"finiteRotation\"\n            value=\"false\"\n            checked={!infiniteRotation}\n            handleRadioChange={handleRadioChange}\n            labelText=\"No\"\n          />\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { FC, useState } from 'react';\nimport './styles/App.scss';\nimport Carousel from './components/Carousel';\n\nconst App: FC<{}> = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n\n  return (\n    <div className=\"App\">\n      <h1\n        className=\"App__title\"\n        data-cy=\"title\"\n      >\n        Carousel with\n        {images.length}\n        images\n      </h1>\n\n      <Carousel images={images} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}