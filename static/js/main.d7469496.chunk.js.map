{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","_ref","images","_useState","useState","_useState2","_slicedToArray","toolTipValue","setToolTipValue","_useState3","_useState4","itemWidth","setItemWidth","_useState5","_useState6","itemNumber","setItemNumber","_useState7","_useState8","step","setSteps","_useState9","_useState10","animationDuration","setAnimationDuration","_useState11","_useState12","infiniteRotation","setInfiniteRotation","_useState13","_useState14","position","setPosition","_useState15","_useState16","frameWidth","setFrameWidth","useEffect","toolTips","document","querySelectorAll","forEach","slider","index","toolPosition","Number","getAttribute","clientWidth","style","left","concat","handleInputChange","event","setter","radius","target","value","newValue","parseInt","handleRadioChange","JSON","parse","maxPosition","length","imagesContainerStyles","width","height","transform","transition","imageStyles","isLastImageDisplayed","Math","abs","isFirstImageDisplayed","_jsxs","className","children","_jsx","type","onClick","prevPosition","newPosition","min","disabled","map","image","src","alt","max","htmlFor","id","onChange","toFixed","name","checked","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d7469496.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles/Carousel.scss';\n\ntype Props = {\n  images: string[];\n};\n\nconst Carousel: React.FC<Props> = ({ images }) => {\n  const [toolTipValue, setToolTipValue] = useState<number>(1);\n  const [itemWidth, setItemWidth] = useState<number>(130);\n  const [itemNumber, setItemNumber] = useState<number>(3);\n  const [step, setSteps] = useState<number>(3);\n  const [animationDuration, setAnimationDuration] = useState<number>(300);\n  const [infiniteRotation, setInfiniteRotation] = useState<boolean>(false);\n  const [position, setPosition] = useState<number>(0);\n  const [frameWidth, setFrameWidth] = useState<number>(itemNumber * itemWidth);\n\n  useEffect(() => {\n    const toolTips = document.querySelectorAll('.toolTip');\n\n    if (toolTips) {\n      const sliders = document.querySelectorAll('.slider');\n\n      sliders.forEach((slider, index) => {\n        const value = Number(slider.getAttribute('value'));\n        const toolPosition = ((value - Number(slider.getAttribute('min')))\n          / (Number(slider.getAttribute('max'))\n            - Number(slider.getAttribute('min'))))\n          * (Number(slider.clientWidth) - Number(toolTips[index].clientWidth));\n\n        (toolTips[index] as HTMLElement).style.left = `${toolPosition}px`;\n      });\n    }\n  }, [toolTipValue]);\n\n  useEffect(() => {\n    setFrameWidth(itemNumber * itemWidth);\n    setPosition(0);\n  }, [itemNumber, itemWidth]);\n\n  useEffect(() => {\n    if (infiniteRotation) {\n      setPosition(0);\n    }\n  }, [infiniteRotation]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>,\n    setter: React.Dispatch<React.SetStateAction<number>>) => {\n    const radius = event.target.value;\n    const newValue = parseInt(radius, 10);\n\n    setter(newValue);\n    setToolTipValue(newValue);\n  };\n\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInfiniteRotation(JSON.parse(event.target.value));\n  };\n\n  let maxPosition = images.length * itemWidth - itemNumber * itemWidth;\n\n  const handleTransitionLeft = () => {\n    setPosition((prevPosition) => {\n      const newPosition = prevPosition + step * itemWidth;\n\n      if (infiniteRotation && newPosition > 0) {\n        return -maxPosition;\n      }\n\n      return Math.min(0, newPosition);\n    });\n  };\n\n  const handleTransitionRight = () => {\n    setPosition((prevPosition) => {\n      const newPosition = prevPosition - step * itemWidth;\n\n      if (infiniteRotation) {\n        if (newPosition < -maxPosition) {\n          maxPosition = 0;\n\n          return maxPosition;\n        }\n\n        if (newPosition > 0) {\n          return -maxPosition;\n        }\n\n        return newPosition;\n      }\n\n      return Math.max(-maxPosition, newPosition);\n    });\n  };\n\n  // STYLES region\n  const imagesContainerStyles = {\n    width: `${frameWidth}px`,\n    height: `${itemWidth}px`,\n    transform: `translateX(${position}px)`,\n    transition: `all ${animationDuration}ms`,\n  };\n\n  const imageStyles = {\n    width: `${itemWidth}px`,\n  };\n  // end STYLES region\n\n  const isLastImageDisplayed = Math.abs(position) === Number(maxPosition);\n\n  const isFirstImageDisplayed = position === 0;\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__container\">\n        <button\n          type=\"button\"\n          className=\"button button-prev\"\n          onClick={handleTransitionLeft}\n          disabled={infiniteRotation ? false : isFirstImageDisplayed}\n        >\n          {'<'}\n        </button>\n        <div\n          className=\"Carousel__list\"\n        >\n          <ul\n            className=\"Carousel__items\"\n            style={imagesContainerStyles}\n          >\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={`Emojy ${index + 1}`}\n                  style={imageStyles}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"button button-next\"\n          data-cy=\"next\"\n          onClick={handleTransitionRight}\n          disabled={infiniteRotation ? false : isLastImageDisplayed}\n        >\n          {'>'}\n        </button>\n      </div>\n      <div className=\"inputs inputs__container\">\n        <label\n          htmlFor=\"itemWidth\"\n          className=\"inputs__labels\"\n        >\n\n          <div className=\"input__labels-title\">\n            Item width (px):\n          </div>\n\n          <div className=\"input__labels-min\">\n            {100}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <input\n              className=\"slider\"\n              type=\"range\"\n              id=\"itemWidth\"\n              min=\"100\"\n              max=\"160\"\n              value={itemWidth}\n              onChange={(event) => handleInputChange(event, setItemWidth)}\n            />\n\n            <div className=\"toolTip\">\n              {itemWidth}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            {160}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"itemNumber\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"input__labels-title\">\n            Items in frame:\n          </div>\n\n          <div className=\"input__labels-min\">\n            {1}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <input\n              className=\"slider\"\n              type=\"range\"\n              id=\"itemNumber\"\n              min=\"1\"\n              max=\"5\"\n              value={itemNumber}\n              onChange={(event) => handleInputChange(event, setItemNumber)}\n            />\n\n            <div className=\"toolTip\">\n              {itemNumber}\n            </div>\n          </div>\n          <div className=\"input__labels-max\">\n            {5}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"stepId\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"input__labels-title\">\n            Step:\n          </div>\n\n          <div className=\"input__labels-min\">\n            {1}\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <input\n              className=\"slider\"\n              type=\"range\"\n              id=\"stepId\"\n              min=\"1\"\n              max={itemNumber}\n              value={step}\n              onChange={(event) => handleInputChange(event, setSteps)}\n            />\n\n            <div className=\"toolTip\">\n              {step}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            {itemNumber}\n          </div>\n        </label>\n\n        <label\n          htmlFor=\"animationDuration\"\n          className=\"inputs__labels\"\n        >\n          <div className=\"input__labels-title\">\n            Animation Duration (ms):\n          </div>\n\n          <div className=\"input__labels-min\">\n            0.1s\n          </div>\n\n          <div className=\"input__labels-slider\">\n            <input\n              className=\"slider\"\n              type=\"range\"\n              id=\"animationDuration\"\n              min=\"100\"\n              max=\"1000\"\n              value={animationDuration}\n              onChange={(event) => {\n                handleInputChange(event, setAnimationDuration);\n              }}\n            />\n            <div className=\"toolTip\">\n              {`${(animationDuration / 1000).toFixed(1)}s`}\n            </div>\n          </div>\n\n          <div className=\"input__labels-max\">\n            1s\n          </div>\n        </label>\n\n        <div className=\"inputs__container-radio\">\n\n          <div className=\"input__labels-title\">\n            Infinite rotation:\n          </div>\n\n          <label htmlFor=\"infiniteRotationTrue\">\n            <input\n              type=\"radio\"\n              name=\"infiniteRotation\"\n              id=\"infiniteRotationTrue\"\n              value=\"true\"\n              checked={infiniteRotation}\n              onChange={handleRadioChange}\n            />\n            Yes\n          </label>\n\n          <label htmlFor=\"infiniteRotationFalse\">\n            <input\n              type=\"radio\"\n              name=\"infiniteRotation\"\n              id=\"infiniteRotationFalse\"\n              value=\"false\"\n              checked={!infiniteRotation}\n              onChange={handleRadioChange}\n            />\n            No\n          </label>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { FC, useState } from 'react';\nimport './styles/App.scss';\nimport Carousel from './components/Carousel';\n\nconst App: FC<{}> = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 className=\"App__title\" data-cy=\"title\">Carousel with {images.length} images</h1>\n\n      <Carousel images={images} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}